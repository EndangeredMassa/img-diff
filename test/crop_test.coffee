assert = require 'assertive'
crop = require '../src/crop'

RGBA_CHANNELS = 4

imageData = """
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
"""

describe 'crop', ->
  it 'fails of the section does not fit in the image', ->
    section =
      x: 50
      y: 500
      width: 40
      height: 20

    error = assert.throws ->
      crop(imageData, section)

    expected = 'Crop section {\"x\":50,\"y\":500,\"width\":40,\"height\":20} out of bounds for image {\"height\":47,\"width\":201}'
    assert.equal expected, error.message

  it 'crops an image', ->
    section =
      x: 60
      y: 10
      width: 40
      height: 20
    croppedImage = crop(imageData, section)

    # there's not a great way to assert this worked
    assert.truthy 'cropped image is smaller', imageData.length > croppedImage.length

